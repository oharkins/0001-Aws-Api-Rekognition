openapi: 3.0.0
info:
  title: Aws-Api-Rekognition
  description: API for managing Rekognition Collections
  version: 1.0.0
  contact:
    name: Odis Harkins
    email: odisharkins@harkinstech.com

tags:
  - name: image

servers:
  - url: https://api.example.com/v1

paths:
  /image/{imageId}:
    post:
      summary: Create an image
      description: Upload Image to Rekognition
      operationId: image-post
      tags:
        - image
      parameters:
      - in: path
        name: imageId
        description: Unique identifier of the image
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers
      x-amazon-apigateway-integration:
        type: aws
        uri: 
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:rekognition:action/IndexFaces"
        credentials:
          Fn::Sub: ${ImageCollectionRole.Arn}
        passthroughBehavior: "never"
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        requestParameters:
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Amz-Target: "'RekognitionService.IndexFaces'"
        requestTemplates:
          image/jpeg: 
            Fn::Sub:
              - |-
                #set($imageId = $input.params('imageId'))
                {
                  "CollectionId": "${CollectionId}",
                  "ExternalImageId": $imageId,
                  "Image": { 
                      "Bytes": "$input.body"
                  },
                  "MaxFaces": 1,
                  "QualityFilter": "HIGH"
                }
              - { CollectionId: { Ref: CollectionId } }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($parsedOutput = $input.path('$'))
                #if($parsedOutput.FaceMatches != "")
                  {
                    "FaceMatches": $parsedOutput.FaceMatches
                  }
                #else
                  #if($parsedOutput.Code != "")
                    $input.json('$')
                  #else
                    #set($context.responseOverride.status = 500)
                    {
                      "message": "Somthing went wrong"
                    }
                  #end
                #end
      responses:
        '200':
          description: Image created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error
    
  /images/search:
    put:
      summary: Get Faces By Image
      description: Search Rekognition
      operationId: image-search
      tags:
        - image
      parameters:
        - $ref: '#/components/parameters/queryPageSize'
        - $ref: '#/components/parameters/queryFaceMatchThreshold'
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers
      x-amazon-apigateway-integration:
        type: aws
        uri: 
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:rekognition:action/SearchFacesByImage"
        credentials:
          Fn::Sub: ${ImageCollectionRole.Arn}
        passthroughBehavior: "never"
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        requestParameters:
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Amz-Target: "'RekognitionService.SearchFacesByImage'"
        requestTemplates:
          image/jpeg: 
            Fn::Sub:
              - |-
                #set($pageSize = $input.params().get('querystring').get('page-size'))
                #set($match = $input.params().get('querystring').get('match-threshold'))
                #if("$!pageSize" == "")
                  #set($pageSize = 5)
                #end
                #if("$!match" == "")
                  #set($match = 95)
                #end
                {
                  "CollectionId": "${CollectionId}",
                  "FaceMatchThreshold": $match,
                  "MaxFaces": $pageSize,
                  "Image": {
                    "Bytes": "$input.body"
                  }
                }
              - { CollectionId: { Ref: CollectionId } }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: |
                #set($parsedOutput = $input.path('$'))
                #if($parsedOutput.FaceMatches != "")
                  {
                    "FaceMatches": $parsedOutput.FaceMatches
                  }
                #else
                  #if($parsedOutput.Code != "")
                    $input.json('$')
                  #else
                    #set($context.responseOverride.status = 500)
                    {
                      "message": "Somthing went wrong"
                    }
                  #end
                #end
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error
    
components:
  schemas:
    Image:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the image
        name:
          type: string
          description: Name of the image
        url:
          type: string
          description: URL of the image file
        tags:
          type: array
          items:
            type: string
          description: List of tags associated with the image
  parameters:
    queryPageSize:
      in: query
      name: page-size
      schema:
        type: integer
        minimum: 5
        maximum: 100
        default: 10
        multipleOf: 5
      required: false
      description: Number of items returned per request.
    queryPageToken:
      in: query
      name: page-token
      schema:
        type: string
      required: false
      description: Token of the last item evaluated in the previous request. This is empty for the first requested page.
    queryFaceMatchThreshold:
      in: query
      name: match-threshold
      schema:
        type: integer
        minimum: 50
        maximum: 100
        default: 95
      required: false
      description: Match Threshold.
